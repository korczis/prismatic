# GitLab CI configuration for Prismatic Elixir/Phoenix project

image: elixir:1.17-alpine

stages:
  - setup
  - test
  - build
  - deploy

variables:
  MIX_ENV: "test"
  DATABASE_URL: "postgres://postgres:postgres@postgres:5432/prismatic_test"
  POSTGRES_PASSWORD: "postgres"
  POSTGRES_USER: "postgres"
  POSTGRES_DB: "prismatic_test"
  POSTGRES_HOST_AUTH_METHOD: "trust"

# Define a cache template to reuse across jobs
.cache_template: &cache_template
  cache:
    key: 
      files:
        - mix.lock
    paths:
      - deps
      - _build
      - priv/plts

# Setup job to install dependencies and prepare the environment
setup:
  <<: *cache_template
  stage: setup
  services:
    - postgres:15-alpine
  before_script:
    - apk add --no-cache build-base git nodejs npm
    - mix local.hex --force
    - mix local.rebar --force
    - mix deps.get
    - mix compile
    - mix cmd mkdir -p priv/plts
  script:
    - mix deps.compile
    - mix compile --warnings-as-errors
    - mix assets.setup
  artifacts:
    paths:
      - deps
      - _build
      - priv/plts

# Run formatter check
format:
  <<: *cache_template
  stage: test
  needs:
    - setup
  script:
    - mix format --check-formatted

# Run tests
test:
  <<: *cache_template
  stage: test
  services:
    - postgres:15-alpine
  needs:
    - setup
  script:
    - mix test

# Run static code analysis with dialyzer
dialyzer:
  <<: *cache_template
  stage: test
  needs:
    - setup
  script:
    - mix dialyzer

# Build production assets
build:
  <<: *cache_template
  stage: build
  variables:
    MIX_ENV: "prod"
  needs:
    - test
    - format
    - dialyzer
  before_script:
    - apk add --no-cache build-base git nodejs npm
    - mix local.hex --force
    - mix local.rebar --force
    - mix deps.get --only prod
  script:
    - mix compile
    - mix assets.deploy
  artifacts:
    paths:
      - _build/prod
      - priv/static
    expire_in: 1 week

# Example deployment job (commented out by default)
# Uncomment and configure as needed for your deployment strategy
# deploy:
#   stage: deploy
#   needs:
#     - build
#   script:
#     - echo "Deploying application..."
#   environment:
#     name: production
#   only:
#     - main